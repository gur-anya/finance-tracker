import { useState } from 'react';
import { Button, Modal, Alert, Form } from 'react-bootstrap';
import { getExpenseCategories, getIncomeCategories, getCategoryDisplayName } from '../utils/categoryMapper';

function TransactionCard({ id, type, timestamp, category, sum, description, onDelete, onEdit }) {
    // –§—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const getTypeDisplay = (type) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const typeValue = String(type).toLowerCase();
        return typeValue === '1' || typeValue === 'income' || typeValue === 'true' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';
    };

    const getTypeColor = (type) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const typeValue = String(type).toLowerCase();
        return typeValue === '1' || typeValue === 'income' || typeValue === 'true' ? 'success' : 'danger';
    };

    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [isDeleting, setIsDeleting] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [error, setError] = useState(null);
    const [editForm, setEditForm] = useState({
        description: description,
        category: category,
        sum: sum,
        type: type
    });

    const formattedSum = Number(sum).toFixed(2);
    const formattedTimestamp = formatTimestamp(timestamp);

    const handleDelete = async () => {
        if (!id) {
            setError('ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        setIsDeleting(true);
        setError(null);
        
        try {
            await onDelete(id);
            setShowDeleteModal(false);
        } catch (error) {
            setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message);
        } finally {
            setIsDeleting(false);
        }
    };

    const handleEdit = () => {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞
        const currentType = String(type).toLowerCase();
        const typeKey = currentType === '1' || currentType === 'income' || currentType === 'true' ? '1' : '0';
        const availableCategories = categories[typeKey] || [];
        
        setEditForm({
            description: description,
            category: availableCategories.includes(category) ? category : availableCategories[0] || 'OTHER',
            sum: sum,
            type: typeKey
        });
        setIsEditing(true);
    };

    const handleSaveEdit = async () => {
        if (!id) {
            setError('ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        try {
            const updatedData = {
                description: editForm.description,
                category: editForm.category,
                sum: parseFloat(editForm.sum),
                type: parseInt(editForm.type)
            };
            
            await onEdit(id, updatedData);
            setIsEditing(false);
        } catch (error) {
            setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message);
        }
    };

    const handleCancelEdit = () => {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞
        const currentType = String(type).toLowerCase();
        const typeKey = currentType === '1' || currentType === 'income' || currentType === 'true' ? '1' : '0';
        const availableCategories = categories[typeKey] || [];
        
        setEditForm({
            description: description,
            category: availableCategories.includes(category) ? category : availableCategories[0] || 'OTHER',
            sum: sum,
            type: typeKey
        });
        setIsEditing(false);
    };

    const handleEditChange = (e) => {
        const { name, value } = e.target;
        setEditForm(prev => {
            const newForm = {
                ...prev,
                [name]: value
            };
            
            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if (name === 'type') {
                const availableCategories = categories[value] || [];
                if (availableCategories.length > 0 && !availableCategories.includes(newForm.category)) {
                    newForm.category = availableCategories[0];
                }
            }
            
            return newForm;
        });
    };

    const categories = {
        '0': [...getExpenseCategories(), 'GOAL'],
        '1': [...getIncomeCategories(), 'GOAL']
    };

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞
    const availableCategories = categories[editForm.type] || [];

    return (
        <>
            <div className={`transaction-card ${isEditing ? 'editing' : ''}`}>
                {!isEditing ? (
                    <>
                        <div className="transaction-info">
                            <div className="transaction-title">{description}</div>
                            <div className="transaction-category">{category}</div>
                            <div className={`transaction-sum text-${getTypeColor(type)}`}>
                                {formattedSum} ‚ÇΩ
                            </div>
                            <div className="transaction-time">{formattedTimestamp}</div>
                        </div>
                        
                        <div className="transaction-actions">
                            <button 
                                className="action-button edit-button"
                                onClick={handleEdit}
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                            >
                                ‚úèÔ∏è
                            </button>
                            <button 
                                className="action-button delete-button"
                                onClick={() => setShowDeleteModal(true)}
                                title="–£–¥–∞–ª–∏—Ç—å"
                            >
                                üóëÔ∏è
                            </button>
                        </div>
                    </>
                ) : (
                    <div className="edit-form">
                        <Form.Group>
                            <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ</Form.Label>
                            <Form.Control
                                type="text"
                                name="description"
                                value={editForm.description}
                                onChange={handleEditChange}
                                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
                            />
                        </Form.Group>
                        
                        <Form.Group>
                            <Form.Label>–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</Form.Label>
                            <Form.Select
                                name="type"
                                value={editForm.type}
                                onChange={handleEditChange}
                            >
                                <option value={1}>–î–æ—Ö–æ–¥</option>
                                <option value={0}>–†–∞—Å—Ö–æ–¥</option>
                            </Form.Select>
                        </Form.Group>
                        
                        <Form.Group>
                            <Form.Label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Form.Label>
                            <Form.Select
                                name="category"
                                value={editForm.category}
                                onChange={handleEditChange}
                            >
                                {availableCategories.map(cat => (
                                    <option key={cat} value={cat}>{getCategoryDisplayName(cat)}</option>
                                ))}
                            </Form.Select>
                        </Form.Group>
                        
                        <Form.Group>
                            <Form.Label>–°—É–º–º–∞</Form.Label>
                            <Form.Control
                                type="number"
                                name="sum"
                                value={editForm.sum}
                                onChange={handleEditChange}
                                step="0.01"
                                min="0.01"
                            />
                        </Form.Group>
                        
                        <div className="d-flex gap-2 mt-2">
                            <Button 
                                variant="success" 
                                size="sm" 
                                onClick={handleSaveEdit}
                            >
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </Button>
                            <Button 
                                variant="secondary" 
                                size="sm" 
                                onClick={handleCancelEdit}
                            >
                                ‚ùå –û—Ç–º–µ–Ω–∞
                            </Button>
                        </div>
                    </div>
                )}
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)}>
                <Modal.Header closeButton>
                    <Modal.Title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?</p>
                    <div className="border rounded p-3 bg-light">
                        <div className="text-center">
                            <strong>{getTypeDisplay(type)}</strong><br/>
                            <span className="fw-bold">{description}</span><br/>
                            <span className="text-muted">{category}</span><br/>
                            <span className={`text-${getTypeColor(type)} fw-bold fs-5`}>
                                {formattedSum} ‚ÇΩ
                            </span><br/>
                            <small className="text-muted">{formattedTimestamp}</small>
                        </div>
                    </div>
                    
                    {error && (
                        <Alert variant="danger" className="mt-2">
                            {error}
                        </Alert>
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowDeleteModal(false)}>
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button 
                        variant="danger" 
                        onClick={handleDelete}
                        disabled={isDeleting}
                    >
                        {isDeleting ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å'}
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    );
}

function formatTimestamp(timestamp) {
    if (!timestamp) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    const date = new Date(timestamp);
    
    if (isNaN(date.getTime())) {
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }

    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');

    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

export default TransactionCard;