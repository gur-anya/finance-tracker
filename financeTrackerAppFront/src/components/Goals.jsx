import { useState, useEffect } from 'react';
import { Card, Row, Col, Button, Form, Alert, Spinner, ProgressBar } from 'react-bootstrap';
import apiService from '../services/api';

function Goals({ onGoalChange, onGoalTransactionsCleared }) {
    const [goal, setGoal] = useState(null);
    const [savedAmount, setSavedAmount] = useState(0);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const [showGoalForm, setShowGoalForm] = useState(false);
    const [goalForm, setGoalForm] = useState({
        title: '',
        targetAmount: ''
    });
    const [clearLoading, setClearLoading] = useState(false);
    const [clearSuccess, setClearSuccess] = useState(null);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    const notifyParent = () => {
        if (onGoalChange) {
            onGoalChange();
        }
    };

    const fetchGoal = async () => {
        setIsLoading(true);
        try {
            const response = await apiService.getUserGoal();
            console.log('Goal response:', response);
            if (response && response.goalName && response.goalSum) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                setGoal({
                    title: response.goalName,
                    targetAmount: response.goalSum
                });
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–¶–ï–õ–¨"
                await fetchSavedAmount();
            } else {
                setGoal(null);
                setSavedAmount(0);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–∏:', error);
            setGoal(null);
            setSavedAmount(0);
        } finally {
            setIsLoading(false);
        }
    };

    const fetchSavedAmount = async () => {
        try {
            console.log('Fetching saved amount...');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é API —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
            const response = await apiService.getGoalSavings();
            console.log('Goal savings response:', response);
            setSavedAmount(response.savedAmount || 0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:', error);
            setSavedAmount(0);
        }
    };

    const createGoal = async (goalData) => {
        setIsLoading(true);
        setError(null);
        
        try {
            const response = await apiService.setUserGoal({
                title: goalData.title,
                targetAmount: parseFloat(goalData.targetAmount)
            });
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            setGoal({
                title: response.goalName,
                targetAmount: response.goalSum
            });
            setSavedAmount(0); // –ù–æ–≤–∞—è —Ü–µ–ª—å, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç
            setShowGoalForm(false);
            setGoalForm({ title: '', targetAmount: '' });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            notifyParent();
        } catch (error) {
            setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏: ' + error.message);
        } finally {
            setIsLoading(false);
        }
    };

    const updateGoal = async (updatedGoal) => {
        setIsLoading(true);
        setError(null);
        
        try {
            const payload = {};
            if (updatedGoal.title) payload.title = updatedGoal.title;
            if (updatedGoal.targetAmount) payload.targetAmount = updatedGoal.targetAmount;
            const response = await apiService.updateUserGoal(payload);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            setGoal({
                title: response.goalName,
                targetAmount: response.goalSum
            });
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
            await fetchSavedAmount();
            setShowGoalForm(false);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            notifyParent();
        } catch (error) {
            setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏: ' + error.message);
        } finally {
            setIsLoading(false);
        }
    };

    const deleteGoal = async () => {
        setIsLoading(true);
        setError(null);
        
        try {
            await apiService.resetUserGoal();
            setGoal(null);
            setSavedAmount(0);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            notifyParent();
        } catch (error) {
            setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏: ' + error.message);
        } finally {
            setIsLoading(false);
        }
    };

    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ü–µ–ª–∏
    const handleClearGoalTransactions = async () => {
        setClearLoading(true);
        setClearSuccess(null);
        setError(null);
        try {
            await apiService.clearGoalTransactions();
            setClearSuccess('–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–¶–ï–õ–¨" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.');
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ —Ü–µ–ª—å
            await fetchSavedAmount();
            notifyParent();
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ü–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (Main.jsx)
            if (onGoalTransactionsCleared) {
                onGoalTransactionsCleared();
            }
        } catch (error) {
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ü–µ–ª–∏: ' + error.message);
        } finally {
            setClearLoading(false);
        }
    };

    useEffect(() => {
        fetchGoal();
    }, []);

    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB'
        }).format(amount);
    };

    const getProgress = () => {
        if (!goal || goal.targetAmount <= 0) return 0;
        return Math.min((savedAmount / goal.targetAmount) * 100, 100);
    };

    const getProgressStatus = () => {
        const percentage = getProgress();
        if (percentage >= 100) return 'success';
        if (percentage >= 75) return 'info';
        if (percentage >= 50) return 'warning';
        return 'danger';
    };

    const getGoalMessage = () => {
        const percentage = getProgress();
        if (percentage >= 100) {
            return {
                text: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å?',
                variant: 'success'
            };
        } else if (percentage >= 50) {
            return {
                text: 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –í—ã –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ —Ü–µ–ª–∏!',
                variant: 'info'
            };
        } else {
            return {
                text: 'üåü –£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!',
                variant: 'warning'
            };
        }
    };

    const handleSubmitGoal = (e) => {
        e.preventDefault();
        
        if (!goalForm.title.trim() || !goalForm.targetAmount) {
            setError('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            return;
        }

        if (parseFloat(goalForm.targetAmount) <= 0) {
            setError('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
            return;
        }

        createGoal(goalForm);
    };

    if (isLoading) {
        return (
            <div className="text-center p-5">
                <Spinner animation="border" role="status">
                    <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </Spinner>
                <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π...</p>
            </div>
        );
    }

    return (
        <div className="stats-container">
            <div className="text-center mb-4">
                <h3>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏</h3>
            </div>

            {error && (
                <Alert variant="danger" className="mb-4" onClose={() => setError(null)} dismissible>
                    {error}
                </Alert>
            )}

            {clearSuccess && (
                <Alert variant="success" className="mb-4" onClose={() => setClearSuccess(null)} dismissible>
                    {clearSuccess}
                </Alert>
            )}

            {!goal ? (
                // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
                <Card>
                    <Card.Body>
                        <div className="text-center mb-4">
                            <h5>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å</h5>
                            <p className="text-muted">
                                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
                            </p>
                        </div>
                        
                        <Form onSubmit={handleSubmitGoal}>
                            <Form.Group className="mb-3">
                                <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ *</Form.Label>
                                <Form.Control
                                    type="text"
                                    value={goalForm.title}
                                    onChange={(e) => setGoalForm(prev => ({ ...prev, title: e.target.value }))}
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–ø—É—Å–∫"
                                    required
                                />
                            </Form.Group>

                            <Form.Group className="mb-3">
                                <Form.Label>–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ *</Form.Label>
                                <Form.Control
                                    type="number"
                                    value={goalForm.targetAmount}
                                    onChange={(e) => setGoalForm(prev => ({ ...prev, targetAmount: e.target.value }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                                    step="0.01"
                                    min="0.01"
                                    required
                                />
                            </Form.Group>

                            <div className="text-center">
                                <Button 
                                    type="submit" 
                                    variant="success" 
                                    disabled={isLoading}
                                >
                                    {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å'}
                                </Button>
                            </div>
                        </Form>
                    </Card.Body>
                </Card>
            ) : (
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏
                <Row>
                    <Col md={8}>
                        <Card className="mb-4">
                            <Card.Body>
                                <div className="text-center">
                                    <h4>{goal.title}</h4>
                                    <div className="mb-3">
                                        <h2 className="text-success">
                                            {formatCurrency(savedAmount)}
                                        </h2>
                                        <p className="text-muted">
                                            –∏–∑ {formatCurrency(goal.targetAmount)}
                                        </p>
                                    </div>
                                    
                                    <div className="mb-3">
                                        <div className="d-flex justify-content-between mb-2">
                                            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                                            <span>{Math.round(getProgress())}%</span>
                                        </div>
                                        <ProgressBar 
                                            variant={getProgressStatus()} 
                                            now={getProgress()} 
                                            className="mb-2"
                                        />
                                    </div>
                                    
                                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º */}
                                    <div className="mb-3">
                                        <Alert variant={getGoalMessage().variant} className="text-center">
                                            {getGoalMessage().text}
                                        </Alert>
                                    </div>
                                    
                                    <div className="row text-center">
                                        <div className="col-12">
                                            <h6>–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å</h6>
                                            <p className="text-primary fw-bold">
                                                {formatCurrency(Math.max(0, goal.targetAmount - savedAmount))}
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </Card.Body>
                        </Card>
                    </Col>
                    
                    <Col md={4}>
                        <Card>
                            <Card.Body>
                                <h5 className="text-center mb-3">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—å—é</h5>
                                
                                <div className="d-grid gap-2">
                                    <Button 
                                        variant="outline-success" 
                                        onClick={() => setShowGoalForm(true)}
                                    >
                                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </Button>
                                    <Button 
                                        variant="outline-danger" 
                                        onClick={deleteGoal}
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å
                                    </Button>
                                    <Button
                                        variant="outline-warning"
                                        onClick={handleClearGoalTransactions}
                                        disabled={clearLoading}
                                    >
                                        {clearLoading ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ü–µ–ª–∏'}
                                    </Button>
                                </div>
                                
                                <hr />
                                
                                <div className="text-center">
                                    <small className="text-muted">
                                        <strong>–í–∞–∂–Ω–æ:</strong> –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–¶–ï–õ–¨" 
                                        –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º
                                    </small>
                                </div>
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏ */}
            {showGoalForm && goal && (
                <Card className="mt-4">
                    <Card.Body>
                        <h5 className="text-center mb-3">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å</h5>
                        <Form onSubmit={(e) => {
                            e.preventDefault();
                            updateGoal({
                                ...goal,
                                title: goalForm.title,
                                targetAmount: goalForm.targetAmount
                            });
                            setShowGoalForm(false);
                        }}>
                            <Form.Group className="mb-3">
                                <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</Form.Label>
                                <Form.Control
                                    type="text"
                                    value={goalForm.title}
                                    onChange={(e) => setGoalForm(prev => ({ ...prev, title: e.target.value }))}
                                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏"
                                />
                            </Form.Group>

                            <Form.Group className="mb-3">
                                <Form.Label>–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞</Form.Label>
                                <Form.Control
                                    type="number"
                                    value={goalForm.targetAmount}
                                    onChange={(e) => setGoalForm(prev => ({ ...prev, targetAmount: e.target.value }))}
                                    placeholder="–°—É–º–º–∞"
                                    step="0.01"
                                    min="0.01"
                                />
                            </Form.Group>

                            <div className="d-flex gap-2">
                                <Button 
                                    type="submit" 
                                    variant="success" 
                                    className="flex-fill"
                                    disabled={isLoading}
                                >
                                    {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                </Button>
                                <Button 
                                    variant="secondary" 
                                    className="flex-fill"
                                    onClick={() => setShowGoalForm(false)}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </Button>
                            </div>
                        </Form>
                    </Card.Body>
                </Card>
            )}
        </div>
    );
}

export default Goals; 